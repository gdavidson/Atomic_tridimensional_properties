/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import pdbparsing.*;
import pkg3dproperties.*;

/**
 *User interface.
 * @author Davidson
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(600, 600));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "RH-5849"));

        jButton1.setText("Calculer les propriétés");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Plan moyen du premier cycle:");

        jLabel2.setText("Plan moyen du deuxième cycle:");

        jLabel3.setText("Angle CNNC:");

        jLabel4.setText("Angle CNCO:");

        jLabel10.setText("Plan moyen entre les deux cycles:");

        jLabel11.setText("Angle entre les deux plans:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(395, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Oestradiol"));

        jButton2.setText("Calculer les propriétés");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Plan Moyen du cycle A:");

        jLabel6.setText("Plan Moyen du cycle B:");

        jLabel7.setText("Plan Moyen du cycle C:");

        jLabel8.setText("Plan Moyen du cycle D:");

        jLabel9.setText("Plan Moyen de tout les cycles:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
               JFileChooser jFileChooser1 = new JFileChooser();
               jFileChooser1.setDialogTitle("Veuillez ouvrir RH5849.pdb");
        int returnVal = jFileChooser1.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = jFileChooser1.getSelectedFile();
        PDBReader pr = new PDBReader(file.getAbsolutePath());
        pr.read();
        ArrayList<AtomCart> atomList = pr.GetAtomsCart();
        ArrayList<String> atomInfos = pr.getAtomParamList();
        ArrayList<Point> pointList = Point.convertIntoPoints(atomList);
        ArrayList<Point> bothcycles = new ArrayList<>();
        //plan moyen du premier cycle aromatique:
        ArrayList<Point> arcycle1 = new ArrayList<>();
        arcycle1.add(pointList.get(4));bothcycles.add(pointList.get(4));
        arcycle1.add(pointList.get(5));bothcycles.add(pointList.get(5));
        arcycle1.add(pointList.get(6));bothcycles.add(pointList.get(6));
        arcycle1.add(pointList.get(7));bothcycles.add(pointList.get(7));
        arcycle1.add(pointList.get(8));bothcycles.add(pointList.get(8));
        arcycle1.add(pointList.get(9));bothcycles.add(pointList.get(9));
        Plane avgPlaneAC1 = Plane.getAveragePlane(arcycle1);
        //plan moyen du deuxieme cycle
        ArrayList<Point> arcycle2 = new ArrayList<>();
        arcycle2.add(pointList.get(10));bothcycles.add(pointList.get(10));
        arcycle2.add(pointList.get(11));bothcycles.add(pointList.get(11));
        arcycle2.add(pointList.get(12));bothcycles.add(pointList.get(12));
        arcycle2.add(pointList.get(13));bothcycles.add(pointList.get(13));
        arcycle2.add(pointList.get(14));bothcycles.add(pointList.get(14));
        arcycle2.add(pointList.get(15));bothcycles.add(pointList.get(15));
        Plane avgPlaneAC2 = Plane.getAveragePlane(arcycle2);
        Plane avgPlane = Plane.getAveragePlane(bothcycles);
        //angle CNNC
        double angleCNNC = Plane.getDihedralAngle(pointList.get(18), pointList.get(3), pointList.get(2), pointList.get(16));
        //angle CNCO
        double angleCNCO = Plane.getDihedralAngle(pointList.get(18), pointList.get(3), pointList.get(17), pointList.get(1));
        NumberFormat df = new DecimalFormat("#0.00");
        NumberFormat df2 = new DecimalFormat("#0.000");
            try {
                FileWriter fw = new FileWriter("RH5849_properties.txt");
                fw.write("Equation du plan moyen entre les deux cycles: "+df.format(avgPlane.getA())+"x+"+df.format(avgPlane.getB())+"y+"+df.format(avgPlane.getC())+"z+"+df.format(avgPlane.getD())+"=0"+"\n");
                jLabel10.setText("Plan moyen entre les deux cycles:"+df.format(avgPlane.getA())+"x+"+df.format(avgPlane.getB())+"y+"+df.format(avgPlane.getC())+"z+"+df.format(avgPlane.getD())+"=0");
                double an = avgPlaneAC1.getAngle(avgPlaneAC2);
                fw.write("Angle entre les deux cycles:"+df.format(Math.toDegrees(an))+"°"+"\n");
                jLabel11.setText("Angle entre les deux cycles:"+df.format(Math.toDegrees(an))+"°");
                //info du 1er cycle
                fw.write("-Premier cycle aromatique:"+"\n");
                fw.write(atomInfos.get(4)+"\n");
                double d1= pointList.get(4).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d1)+"\n");
                fw.write(atomInfos.get(5)+"\n");
                double d2= pointList.get(5).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d2)+"\n");
                fw.write(atomInfos.get(6)+"\n");
                double d3= pointList.get(6).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d3)+"\n");
                fw.write(atomInfos.get(7)+"\n");
                double d4= pointList.get(7).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d4)+"\n");
                fw.write(atomInfos.get(8)+"\n");
                double d5= pointList.get(8).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d5)+"\n");
                fw.write(atomInfos.get(9)+"\n");
                double d6= pointList.get(9).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d6)+"\n");
                fw.write("Equation du plan moyen: "+df.format(avgPlaneAC1.getA())+"x+"+df.format(avgPlaneAC1.getB())+"y+"+df.format(avgPlaneAC1.getC())+"z+"+df.format(avgPlaneAC1.getD())+"=0"+"\n");
                jLabel1.setText("Plan moyen du premier cycle:"+df.format(avgPlaneAC1.getA())+"x+"+df.format(avgPlaneAC1.getB())+"y+"+df.format(avgPlaneAC1.getC())+"z+"+df.format(avgPlaneAC1.getD())+"=0");
                //2ème cycle
                fw.write("-Deuxième cycle aromatique:"+"\n");
                fw.write(atomInfos.get(10)+"\n");
                double d7= pointList.get(10).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d7)+"\n");
                fw.write(atomInfos.get(11)+"\n");
                double d8= pointList.get(11).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d8)+"\n");
                fw.write(atomInfos.get(12)+"\n");
                double d9= pointList.get(12).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d9)+"\n");
                fw.write(atomInfos.get(13)+"\n");
                double d10= pointList.get(13).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d10)+"\n");
                fw.write(atomInfos.get(14)+"\n");
                double d11= pointList.get(14).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d11)+"\n");
                fw.write(atomInfos.get(15)+"\n");
                double d12= pointList.get(15).getDistanceFromPlane(avgPlane);fw.write("Distance par rapport au plan: "+df2.format(d12)+"\n");
                fw.write("Equation du plan moyen: "+df.format(avgPlaneAC2.getA())+"x+"+df.format(avgPlaneAC2.getB())+"y+"+df.format(avgPlaneAC2.getC())+"z+"+df.format(avgPlaneAC2.getD())+"=0"+"\n");
                jLabel2.setText("Plan moyen du deuxième cycle:"+df.format(avgPlaneAC2.getA())+"x+"+df.format(avgPlaneAC2.getB())+"y+"+df.format(avgPlaneAC2.getC())+"z+"+df.format(avgPlaneAC2.getD())+"=0");
                
                //Angle CNNC
                fw.write("-Angle CNNC:"+"\n");
                fw.write(atomInfos.get(18)+"\n");
                fw.write(atomInfos.get(3)+"\n");
                fw.write(atomInfos.get(2)+"\n");
                fw.write(atomInfos.get(16)+"\n");
                fw.write("Angle="+df.format(Math.toDegrees(angleCNNC))+"°"+"\n");
                jLabel3.setText("Angle CNNC="+df.format(Math.toDegrees(angleCNNC))+"°");
                //Angle CNCO
                fw.write("-Angle CNCO:"+"\n");
                fw.write(atomInfos.get(18)+"\n");
                fw.write(atomInfos.get(3)+"\n");
                fw.write(atomInfos.get(17)+"\n");
                fw.write(atomInfos.get(1)+"\n");
                fw.write("Angle="+df.format(Math.toDegrees(angleCNCO))+"°"+"\n");
                jLabel4.setText("Angle CNCO="+df.format(Math.toDegrees(angleCNCO))+"°");
                //closure
                fw.flush();
                fw.close();
                
                
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
                       JFileChooser jFileChooser1 = new JFileChooser();
               jFileChooser1.setDialogTitle("Veuillez ouvrir E2-1ERE.pdb");
        int returnVal = jFileChooser1.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = jFileChooser1.getSelectedFile();
        PDBReader pr = new PDBReader(file.getAbsolutePath());
        pr.read();
        ArrayList<AtomCart> atomList = pr.GetAtomsCart();
        ArrayList<String> atomInfos = pr.getAtomParamList();
        ArrayList<Point> pointList = Point.convertIntoPoints(atomList);
        //plan moyen de A 
        ArrayList<Point> cycleA = new ArrayList<>();
        cycleA.add(pointList.get(0));
        cycleA.add(pointList.get(1));
        cycleA.add(pointList.get(2));
        cycleA.add(pointList.get(4));
        cycleA.add(pointList.get(5));
        cycleA.add(pointList.get(10));
        Plane avgPlaneA = Plane.getAveragePlane(cycleA);
        //plan de B
        ArrayList<Point> cycleB = new ArrayList<>();
        cycleB.add(pointList.get(5));
        cycleB.add(pointList.get(6));
        cycleB.add(pointList.get(7));
        cycleB.add(pointList.get(8));
        cycleB.add(pointList.get(9));
        cycleB.add(pointList.get(10));
        Plane avgPlaneB = Plane.getAveragePlane(cycleB);
        //Plan de C
       ArrayList<Point> cycleC = new ArrayList<>();
        cycleC.add(pointList.get(8));
        cycleC.add(pointList.get(9));
        cycleC.add(pointList.get(11));
        cycleC.add(pointList.get(12));
        cycleC.add(pointList.get(13));
        cycleC.add(pointList.get(14));
        Plane avgPlaneC = Plane.getAveragePlane(cycleC);
        //Plan de D
        ArrayList<Point> cycleD = new ArrayList<>();
        cycleD.add(pointList.get(13));
        cycleD.add(pointList.get(14));
        cycleD.add(pointList.get(15));
        cycleD.add(pointList.get(16));
        cycleD.add(pointList.get(17));
        cycleD.add(pointList.get(18));
        Plane avgPlaneD = Plane.getAveragePlane(cycleD);
        //plan global
        Plane avgPlaneAll = Plane.getAveragePlane(pointList);
        NumberFormat df = new DecimalFormat("#0.00");
        NumberFormat df2 = new DecimalFormat("#0.000");

            try {
                FileWriter fw = new FileWriter("E2_properties.txt");
               //info du cycle A
                fw.write("-Cycle A:"+"\n");
                fw.write(atomInfos.get(0)+"\n");
                double d0= pointList.get(0).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d0)+"\n");
                fw.write(atomInfos.get(1)+"\n");
                double d1= pointList.get(1).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d1)+"\n");
                fw.write(atomInfos.get(2)+"\n");
                double d2= pointList.get(2).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d2)+"\n");
                fw.write(atomInfos.get(4)+"\n");
                double d3= pointList.get(4).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d3)+"\n");
                fw.write(atomInfos.get(5)+"\n");
                double d4= pointList.get(5).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d4)+"\n");
                fw.write(atomInfos.get(10)+"\n");
                double d5= pointList.get(10).getDistanceFromPlane(avgPlaneA);fw.write("Distance par rapport au plan: "+df2.format(d5)+"\n");
                fw.write("Equation du plan moyen: "+df.format(avgPlaneA.getA())+"x+"+df.format(avgPlaneA.getB())+"y+"+df.format(avgPlaneA.getC())+"z+"+df.format(avgPlaneA.getD())+"=0"+"\n");
                jLabel5.setText("Plan moyen du cycle A:"+df.format(avgPlaneA.getA())+"x+"+df.format(avgPlaneA.getB())+"y+"+df.format(avgPlaneA.getC())+"z+"+df.format(avgPlaneA.getD())+"=0");
                //Info Cycle B
                fw.write("-Cycle B:"+"\n");
                fw.write(atomInfos.get(5)+"\n");
                double d6= pointList.get(5).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d6)+"\n");
                fw.write(atomInfos.get(6)+"\n");
                double d7= pointList.get(6).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d7)+"\n");
                fw.write(atomInfos.get(7)+"\n");
                double d8= pointList.get(7).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d8)+"\n");
                fw.write(atomInfos.get(8)+"\n");
                double d9= pointList.get(8).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d9)+"\n");
                fw.write(atomInfos.get(9)+"\n");
                double d10= pointList.get(9).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d10)+"\n");
                fw.write(atomInfos.get(10)+"\n");
                double d11= pointList.get(11).getDistanceFromPlane(avgPlaneB);fw.write("Distance par rapport au plan: "+df2.format(d11)+"\n");
                fw.write("Equation du plan moyen: "+df.format(avgPlaneB.getA())+"x+"+df.format(avgPlaneB.getB())+"y+"+df.format(avgPlaneB.getC())+"z+"+df.format(avgPlaneB.getD())+"=0"+"\n");
                jLabel6.setText("Plan moyen du cycle B:"+df.format(avgPlaneB.getA())+"x+"+df.format(avgPlaneB.getB())+"y+"+df.format(avgPlaneB.getC())+"z+"+df.format(avgPlaneB.getD())+"=0");
                //Info cycle C
                fw.write("-Cycle C:"+"\n");
                fw.write(atomInfos.get(8)+"\n");
                double d12= pointList.get(8).getDistanceFromPlane(avgPlaneC);fw.write("Distance par rapport au plan: "+df2.format(d12)+"\n");
                fw.write(atomInfos.get(9)+"\n");
                double d13= pointList.get(9).getDistanceFromPlane(avgPlaneC);fw.write("Distance par rapport au plan: "+df2.format(d13)+"\n");
                fw.write(atomInfos.get(11)+"\n");
                double d14= pointList.get(11).getDistanceFromPlane(avgPlaneC);fw.write("Distance par rapport au plan: "+df2.format(d14)+"\n");
                fw.write(atomInfos.get(12)+"\n");
                double d15= pointList.get(12).getDistanceFromPlane(avgPlaneC);fw.write("Distance par rapport au plan: "+df2.format(d15)+"\n");
                fw.write(atomInfos.get(13)+"\n");
                double d16= pointList.get(13).getDistanceFromPlane(avgPlaneC);fw.write("Distance par rapport au plan: "+df2.format(d16)+"\n");
                fw.write(atomInfos.get(14)+"\n");
                fw.write("Equation du plan moyen "+df.format(avgPlaneC.getA())+"x+"+df.format(avgPlaneC.getB())+"y+"+df.format(avgPlaneC.getC())+"z+"+df.format(avgPlaneC.getD())+"=0"+"\n");
                jLabel7.setText("Plan moyen du cycle C:"+df.format(avgPlaneC.getA())+"x+"+df.format(avgPlaneC.getB())+"y+"+df.format(avgPlaneC.getC())+"z+"+df.format(avgPlaneC.getD())+"=0");
                //Info Cycle D
                fw.write("-Cycle D:"+"\n");
                fw.write(atomInfos.get(0)+"\n");
                double d17= pointList.get(0).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d17)+"\n");
                fw.write(atomInfos.get(1)+"\n");
                double d18= pointList.get(1).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d18)+"\n");
                fw.write(atomInfos.get(2)+"\n");
                double d19= pointList.get(2).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d19)+"\n");
                fw.write(atomInfos.get(4)+"\n");
                double d20= pointList.get(4).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d20)+"\n");
                fw.write(atomInfos.get(5)+"\n");
                double d21= pointList.get(5).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d21)+"\n");
                fw.write(atomInfos.get(10)+"\n");
                double d22= pointList.get(10).getDistanceFromPlane(avgPlaneD);fw.write("Distance par rapport au plan: "+df2.format(d22)+"\n");
                fw.write("Equation du plan moyen: "+df.format(avgPlaneD.getA())+"x+"+df.format(avgPlaneD.getB())+"y+"+df.format(avgPlaneD.getC())+"z+"+df.format(avgPlaneD.getD())+"=0"+"\n");
                jLabel8.setText("Plan moyen du cycle D:"+df.format(avgPlaneD.getA())+"x+"+df.format(avgPlaneD.getB())+"y+"+df.format(avgPlaneD.getC())+"z+"+df.format(avgPlaneD.getD())+"=0");
                //Info tout les cycles
                fw.write("-Plan global de tout les cycles:"+"\n");
                for (int i =0;i<atomInfos.size();i++){
                    fw.write(atomInfos.get(i)+"\n");
                    double d = pointList.get(i).getDistanceFromPlane(avgPlaneAll);
                    fw.write("Distance par rapport au plan: "+df2.format(d)+"\n");
                    }
                fw.write("Equation du plan moyen: "+df.format(avgPlaneAll.getA())+"x+"+df.format(avgPlaneAll.getB())+"y+"+df.format(avgPlaneAll.getC())+"z+"+df.format(avgPlaneAll.getD())+"=0"+"\n");
                jLabel9.setText("Plan moyen de tout les cycles:"+df.format(avgPlaneAll.getA())+"x+"+df.format(avgPlaneAll.getB())+"y+"+df.format(avgPlaneAll.getC())+"z+"+df.format(avgPlaneAll.getD())+"=0");
                //closure
                fw.flush();
                fw.close();
                
                
            } catch (IOException ex) {
                Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new UI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
